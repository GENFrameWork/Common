# --------------------------------------------------------------------
# GEN_CMakeLists_Main_Sources.txt
# Main: Sources
# --------------------------------------------------------------------


list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_COMMON}/VersionFrameWork.cpp")
list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_MAINPROC}/MainProc.cpp")


# --------------------------------------------------------------------
# Application   

if(APPFLOW_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_APPFLOW}/APPFlowBase.cpp")                         
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_APPFLOW}/APPFlow_XEvent.cpp")                         
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_APPFLOW}/APPFlowMain.cpp")


  if(APPFLOW_EXTENDED_APPLICATIONSTATUS_FEATURE)
      
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_APPFLOW}/APPFlowExtended_ApplicationStatus.cpp")   

  endif()


  if(APPFLOW_EXTENDED_INTERNETSTATUS_FEATURE)
  
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_APPFLOW}/APPFlowExtended_InternetStatus.cpp")   
  
  endif()  


  if(APPFLOW_EXTENDED_FEATURE)
 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_APPFLOW}/APPFlowExtended.cpp")   
  
  endif()


  if(APPFLOW_CONSOLE_FEATURE)
 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_APPFLOW}/APPFlowConsole.cpp")   
  
  endif()
        
        
  if(APPFLOW_GRAPHICS_FEATURE) 

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_APPFLOW}/APPFlowGraphics.cpp") 
  
  endif()

  
  if(APPFLOW_CHECKRESOURCESHARDWARE_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_APPFLOW}/APPFlowCheckResourcesHardware.cpp")  
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_APPFLOW}/APPFlowCheckResourcesHardware_XEvent.cpp")    
    
  endif()


  if(APPFLOW_INTERNETSERVICES_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_APPFLOW}/APPFlowInternetServices.cpp")                         
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_APPFLOW}/APPFlowInternetServices_XEvent.cpp") 
         
  endif()


  if(APPFLOW_LOG_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_APPFLOW}/APPFlowLog.cpp")     

  endif()


  if(APPFLOW_WEBSERVER_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_APPFLOW}/APPFlowWebServer.cpp")  

  endif()


  if(APPFLOW_UPDATE_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_APPFLOW}/APPFlowUpdate.cpp")  
    
  endif()


  if(APPFLOW_ALERTS_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_APPFLOW}/APPFlowAlerts.cpp")  

  endif()


endif()

   
# --------------------------------------------------------------------
# Application CFG  

if(APPFLOW_CFG_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_APPFLOW}/APPFlowCFG.cpp")

endif()


if(APPFLOW_CFG_REMOTEFILE_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIORemoteFileCFG.cpp")

endif()


# --------------------------------------------------------------------
# User Interface

if(USERINTERFACE_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Color.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Colors.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Text.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Texts.cpp")    
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Background.cpp")    
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Animation.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Animations.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_BoundaryLine.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_VirtualKeyBoard.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Layout.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_XEvent.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Manager.cpp")
 
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_SKIN}/UI_Skin.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_SKIN}/UI_SkinCanvas.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_SKIN}/UI_SkinCanvas_Flat.cpp")  

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_ELEMENTS}/UI_Element.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_ELEMENTS}/UI_Element_Text.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_ELEMENTS}/UI_Element_Image.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_ELEMENTS}/UI_Element_Animation.cpp")    
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_ELEMENTS}/UI_Element_Option.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_ELEMENTS}/UI_Element_MultiOption.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_ELEMENTS}/UI_Element_Button.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_ELEMENTS}/UI_Element_CheckBox.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_ELEMENTS}/UI_Element_TextBox.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_ELEMENTS}/UI_Element_EditText.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_ELEMENTS}/UI_Element_Form.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_ELEMENTS}/UI_Element_Menu.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_ELEMENTS}/UI_Element_ListBox.cpp")   
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_ELEMENTS}/UI_Element_ProgressBar.cpp")   
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_ELEMENTS}/UI_Element_Scroll.cpp")   
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_ELEMENTS}/UI_Element_ControlTransition.cpp")

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_PROPERTYS}/UI_Property_Selectable.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_PROPERTYS}/UI_Property_Editable.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_USERINTERFACE_PROPERTYS}/UI_Property_Scrolleable.cpp")  
 
endif()


# --------------------------------------------------------------------
# Scripts

if(SCRIPT_FEATURE)


  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_XEvent.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_Lib.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_Lib_Function.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_Language_G.cpp")

  if(SCRIPT_CACHE_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_Cache.cpp")

  endif()
  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Math.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Rand.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Timer.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_String.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Path.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Dir.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Trace.cpp")  


  if(SCRIPT_LIB_SYSTEM_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_System.cpp")  

  endif()


  if(SCRIPT_LIB_PROCESS_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Process.cpp")  
    
  endif()

  
  if(SCRIPT_LIB_LOG_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Log.cpp")  

  endif()


  if(SCRIPT_LIB_CONSOLE_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Console.cpp") 

  endif()


  if(SCRIPT_LIB_WINDOW_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Window.cpp")

  endif()


  if(SCRIPT_LIB_CFG_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_CFG.cpp")  

  endif()


  if(SCRIPT_LIB_INPUTSIMULATE_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_InputSimulate.cpp")

  endif()


  if(SCRIPT_LIB_DEVTEST_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_DevTest.cpp")

  endif()


  if(SCRIPT_G_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_Language_G.cpp")

  endif()


  if(SCRIPT_LUA_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_Language_Lua.cpp")
  
  endif()


  if(SCRIPT_JAVASCRIPT_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_Language_Javascript.cpp")
  
  endif()

endif()


# -------------------------------------------------
# Databases

if(DATABASES_SQL_FEATURE)  

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Factory.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Database.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Connection.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Query.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Error.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Result.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Variant.cpp")


  if(DATABASES_SQL_SQLITE_FEATURE)
  
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_SQLITE}/SQLite_Connection.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_SQLITE}/SQLite_Database.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_SQLITE}/SQLite_Query.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_SQLITE}/SQLite_Result.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_SQLITE}/sqlite3.c")

  endif()


  if(DATABASES_SQL_MYSQL_FEATURE)

    list(APPEND GEN_INCLUDES_DIR_LIST ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_MYSQL})  
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL}/MySQL_Connection.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL}/MySQL_Database.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL}/MySQL_Query.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL}/MySQL_Result.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL}/MySQL_Variant.cpp")

  endif()


  if(DATABASES_SQL_POSTGRESQL_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_POSTGRESQL}/PostgreSQL_Connection.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_POSTGRESQL}/PostgreSQL_Database.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_POSTGRESQL}/PostgreSQL_Query.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_POSTGRESQL}/PostgreSQL_Result.cpp")

  endif()

endif()


# -------------------------------------------------
# Graphics

if(GRP_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPFactory.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPScreen.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPViewport.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPXEvent.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPProperties.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmap.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapSequence.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPFrameRate.cpp")


  if(GRP_DESKTOPMANAGER_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPDesktopManager.cpp")

  endif()


  if(GRP_BITMAP_FILE_BMP_FEATURE)    
    
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_BITMAP}/GRPBitmapFileBMP.cpp")
    
  endif()


  if(GRP_BITMAP_FILE_JPG_FEATURE)    
     
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_BITMAP}/GRPBitmapFileJPG.cpp")
    
  endif()
  

  if(GRP_BITMAP_FILE_PNG_FEATURE)    
     
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_BITMAP}/GRPBitmapFilePNG.cpp")
    
    
  endif()


  if(GRP_BITMAP_FILE_TGA_FEATURE)    
    
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_BITMAP}/GRPBitmapFileTGA.cpp")
        
  endif()


  if(GRP_BITMAP_FILE_FEATURE)    
    
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_BITMAP}/GRPBitmapFile.cpp")
        
  endif()

     
  if(GRP_VECTOR_FILE_DXF_FEATURE)
    
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFValue.cpp")  
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFXDataCtrl.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFEntity.cpp")   
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFEntityDefPoint.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFEntityDefVertex.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFEntityDefStringValue.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFEntityObj.cpp")  
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFEntityObj3DFace.cpp") 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFEntityObjArc.cpp") 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFEntityObjCircle.cpp") 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFEntityObjEllipse.cpp") 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFEntityObjLine.cpp")    
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFEntityObjLWPolyLine.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFEntityObjMText.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFEntityObjPoint.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFEntityObjPolyLine.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFEntityObjText.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFTextPart.cpp")  
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFTextBlock.cpp") 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFTextSection.cpp")  
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFTextSectionHeader.cpp")  
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFTextSectionBlocks.cpp") 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFTextSectionEntities.cpp") 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXFConfig.cpp")   
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR_DXF}/GRPVectorFileDXF.cpp")  

  endif()


  if(GRP_VECTOR_FILE_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR}/GRPVectorFile_XEvent.cpp")  
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR}/GRPVectorFileConfig.cpp")  
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VECTOR}/GRPVectorFile.cpp") 

  endif()


  if(GRP_VIDEO_FILE_AVI_FEATURE)
     
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VIDEO}/GRPVideoFileAVI.cpp")

  endif()


  if(GRP_VIDEO_FILE_FEATURE)
    
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_FORMATFILES_VIDEO}/GRPVideoFile.cpp")
  
  endif()


  if(GRP_2D_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_2D}/GRPCanvas.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_2D}/GRP2DVertexs.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_GRAPHIC_2D}/GRP2DRebuildAreas.cpp")
  
  endif()

endif()


# -------------------------------------------------
# Inputs

if(INP_SIMULATE_FEATURE)
  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_INPUT}/INPSimulate.cpp")  

endif()


if(INP_CAPTURE_FEATURE)
  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_INPUT}/INPCapture_XEvent.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_INPUT}/INPCapture.cpp")  

endif()


if(INP_FEATURE)  

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_INPUT}/INPManager.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_INPUT}/INPFactory.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_INPUT}/INPDevice.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_INPUT}/INPButton.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_INPUT}/INPCursor.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_INPUT}/INPCursorMotion.cpp")

endif()


# --------------------------------------------------------------------
# Sound 

if(SND_FEATURE) 

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SOUND}/SNDFactory.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SOUND}/SNDFactory_XEvent.cpp")    
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SOUND}/SNDPlayCFG.cpp") 
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SOUND}/SNDItem.cpp") 
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SOUND}/SNDNote.cpp") 
    
  if((COMPILE_FOR_WINDOWS) OR (COMPILE_FOR_LINUX))

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SOUND_OPENAL}/SNDOpenALFactory.cpp")  
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SOUND_OPENAL}/SNDOpenALSource.cpp")  
	  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SOUND_OPENAL}/SNDOpenALBuffer.cpp")  
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SOUND_OPENAL}/SNDOpenALPlayItem.cpp")  

  endif()


  if(SND_FILE_OGG_FEATURE OR SND_FILE_WAV_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SOUND_FORMATFILES}/SNDFile.cpp") 

    if(SND_FILE_OGG_FEATURE)
       
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SOUND_FORMATFILES}/SNDFileOGG.cpp")  

    endif()

    if(SND_FILE_WAV_FEATURE)

      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_SOUND_FORMATFILES}/SNDFileWAV.cpp")  
      
    endif()

  endif()
  
endif()


# --------------------------------------------------------------------
# Data Input/Output

if(DIO_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOFactory.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOMAC.cpp")
 

  if(DIO_PUBLICINTERNETIP_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOPublicInternetIP.cpp")
    
  endif()
  

  if(DIO_WAKEONLAN_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWakeOnLAN.cpp")
  
  endif()


  if(DIO_MPSSE_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS}/DIOMPSSE.cpp")

  endif()


  if(DIO_DNSPROTOCOL_MITM_SERVER)
    
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIODNSProtocol_MitM_Server.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIODNSProtocol_MitM_Server_XEvent.cpp")
    
  endif()


  if(DIO_DNSRESOLVER_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIODNSProtocol_Client.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODNSResolver.cpp")  

  endif()


  if(DIO_SCRAPERWEB_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB}/DIOScraperWeb.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB}/DIOScraperWebCache.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB}/DIOScraperWebPublicIP.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB}/DIOScraperWebMACManufacturer.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB}/DIOScraperWebSexName.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB}/DIOScraperWebTranslation.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB}/DIOScraperWebUserAgentID.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB}/DIOScraperWebWeather.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB}/DIOScraperWebGeolocationIP.cpp")
  
  endif()


  if(DIO_CHECKCONNECTIONS_FEATURE) 

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOCheckInternetConnection.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOCheckTCPIPConnections.cpp")
  
  endif()


  if(DIO_NETWORKTIMEPROTOCOL_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIONTP.cpp")  
  
  endif()


  if(DIO_DYNDNS_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIODynDNS.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODynDNS_Manager.cpp")    
  
  endif()


  if(DIO_WIFIMANAGERMODE_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWifiManagerMode.cpp")
    
  endif()


  if(DIO_NOTIFICATIONS_MANAGER_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIONotificationsManager.cpp")

  endif()


  if(DIO_PING_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOPing.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOPing_XEvent.cpp")
  
  endif()


  if(DIO_COREPROTOCOL_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS_COREPROTOCOL}/DIOCoreProtocol_XEvent.cpp") 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS_COREPROTOCOL}/DIOCoreProtocol.cpp")   
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS_COREPROTOCOL}/DIOCoreProtocol_Header.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS_COREPROTOCOL}/DIOCoreProtocol_Messages.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS_COREPROTOCOL}/DIOCoreProtocol_CFG.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS_COREPROTOCOL}/DIOCoreProtocol_RegisterData.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS_COREPROTOCOL}/DIOCoreProtocol_Connection.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS_COREPROTOCOL}/DIOCoreProtocol_ConnectionsManager_XEvent.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS_COREPROTOCOL}/DIOCoreProtocol_ConnectionsManager.cpp")  
    
  endif()

  
  if(DIO_PROTOCOL_FEATURE)

     list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS_PROTOCOL}/DIOProtocol_XEvent.cpp")
     list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS_PROTOCOL}/DIOProtocol.cpp")
     list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS_PROTOCOL}/DIOProtocol_ApplicationData.cpp")
     list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS_PROTOCOL}/DIOProtocol_ConnectionsManager_XEvent.cpp")
     list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS_PROTOCOL}/DIOProtocol_ConnectionsManager.cpp")  
     list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS_PROTOCOL}/DIOProtocol_ApplicationData.cpp")
  
  endif()


  if(DIO_PROTOCOL_CLI_BUS_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS_CLIPROTOCOL}/DIOCLIProtocolBus.cpp")
  
  endif()


  if(DIO_PROTOCOL_CLI_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS_CLIPROTOCOL}/DIOCLIProtocol.cpp")
  
  endif()


  if(DIO_STREAMCIPHER_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamCipher.cpp")
  
  endif()


  if(DIO_ALERTS_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOAlerts.cpp")    

  endif()


  if(DIO_SMTP_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOSMTP.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOEmailAddress.cpp")

  endif()


  if(DIO_SNMP_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOSNMP.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XBER.cpp")

  endif()


  if(DIO_ATCMD_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOATCMDS.cpp")  
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOATCMDGSM.cpp")   

  endif()


  if(DIO_NODEMANAGER_FEATURE)    

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_NODES}/DIONodeManager.cpp")

  endif()


  if(DIO_NODEITEMHANDLER_SENSORAM2315_FEATURE)    

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_NODES}/DIONodeItemHandler_SensorAM2315.cpp")   

  endif()


  if(DIO_NODEITEMHANDLER_GPIODIGITAL_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_NODES}/DIONodeItemHandler_GPIODigital.cpp")

  endif()
 

  if(DIO_NODES_FEATURE)    

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_NODES}/DIONode.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_NODES}/DIONode_XEvent.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_NODES}/DIONodeItem.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_NODES}/DIONodeItemValue.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_NODES}/DIONodeItemValueUnitFormat.cpp")   
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_NODES}/DIONodeItemHandler.cpp") 

  endif()


  if(DIO_MODBUSCLIENT_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOModBus_Client.cpp")
  
  endif()


  if(DIO_LEDNEOPIXELWS2812B_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS}/DIOLedNeoPixelWS2812B.cpp")
  
  endif()


  if(DIO_IEC60870_5_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOIEC60870_5.cpp")
  
  endif()


  if(DIO_OBEXPUSH_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOOBEXPush.cpp")
      
  endif()


  if(DIO_PCAP_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOPCap_Filters.cpp")  
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOPCap.cpp")  
    
  endif()


  if(DIO_GPIO_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOGPIO.cpp")

  endif()
  
  
  if(DIO_OSPIPELINE_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOOSPipeline.cpp")

  endif()


  if(DIO_NATIVEMSGBROWSEREXTENSION_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIONativeMgsBrowserExtension.cpp")
    
  endif()


  if(DIO_WEBCLIENT_FEATURE OR DIO_WEBSERVER_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebHeader.cpp")

  endif()


  if(DIO_WEBCLIENT_FEATURE) 

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebClient.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebClient_XEvent.cpp")   
  
  endif()


  if(DIO_WEBSERVER_RESOLVEENDPOINT_FEATURE) 

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebServer_ResolveEndPoint.cpp") 

  endif()


  if(DIO_WEBSERVER_FEATURE)  

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebPageHTMLCreator.cpp") 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebPageHTMLCreator_XEvent.cpp")                        
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebServer.cpp")                         
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebServer_XEvent.cpp")                         
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebServer_APIRest.cpp") 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebServer_Plugin.cpp")  
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebServer_PluginsManager.cpp") 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebServer_Plugin_CGI.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebServer_Plugin_PHP.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebServer_QueryStrings.cpp")
  
  endif()
 

  if(DIO_STREAMTLS_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS_TLS}/DIOStreamTLS.cpp")     
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS_TLS}/DIOStreamTLSConfig.cpp") 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS_TLS}/DIOStreamTLSMessages.cpp") 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS_TLS}/DIOStreamTLSMessagesExtension.cpp") 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS_TLS}/DIOStreamTLSMessagesHandShakeClientHello.cpp") 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS_TLS}/DIOStreamTLSMessagesHandShakeServerHello.cpp") 
  
  endif()


  if(DIO_STREAM_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODevice.cpp")   
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStream_XEvent.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStream.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamConfig.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamDevice.cpp")  
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamEnumDevices.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamEnumServers.cpp") 
  

    if(DIO_STREAMUART_FEATURE)

      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUART.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUARTConfig.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUARTLocalEnumDevices.cpp")

    endif()


    if(DIO_STREAMUSB_FEATURE)

      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUSB.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUSBConfig.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamDeviceUSB.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUSBLocalEnumDevices.cpp")

    endif()


    if(DIO_STREAMBLUETOOTH_FEATURE OR DIO_STREAMBLUETOOTHLE_FEATURE) 

      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamBluetooth.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamBluetoothConfig.cpp")  
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamDeviceBluetooth.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamEnumBluetoothDevices.cpp")      
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamBluetoothLocalEnumDevices.cpp")     

    endif()


    if(DIO_STREAMBLUETOOTH_FEATURE) 

      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamBluetoothRemoteEnumDevices.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamDeviceBluetooth.cpp")  

    endif()


    if(DIO_STREAMBLUETOOTHLE_FEATURE)

      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamBluetoothLERemoteEnumDevices_XEvent.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamBluetoothLERemoteEnumDevices.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamDeviceBluetoothLE.cpp")  

    endif()


    if(DIO_STREAMI2C_FEATURE)

      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODeviceI2C.cpp")   
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamI2C.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamI2CConfig.cpp")  
 
      if(DIO_STREAMI2C_6AXISTRACKING_LSM303DLHC_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2C6AxisTrackingLSM303DLHC.cpp")
  
      endif()


      if(DIO_STREAMI2C_6AXISTRACKING_BMI270_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2C6AxisTrackingBMI270.cpp")
  
      endif()


      if(DIO_STREAMI2C_9AXISTRACKING_MPU9150_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2C9AxisTrackingMPU9150.cpp")
  
      endif()


      if(DIO_STREAMI2C_ADDACONVERTER_PCF8591_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CADDAConverterPCF8591.cpp")
  
      endif()


      if(DIO_STREAMI2C_AIRQUALITY_CCS811_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CAirQualityCCS811.cpp") 
  
      endif()


      if(DIO_STREAMI2C_EEPROM_24XXX_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CEEprom24XXX.cpp")  
  
      endif()


      if(DIO_STREAMI2C_GPIO_MCP2317_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CGPIOMCP2317.cpp")
  
      endif()


      if(DIO_STREAMI2C_GPIO_PCF8574_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CGPIOPCF8574.cpp")
  
      endif()


      if(DIO_STREAMI2C_LIGHTSENSOR_TSL2561_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CLightSensorTSL2561.cpp")
  
      endif()


      if(DIO_STREAMI2C_OLEDDISPLAY_SSD1306_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2COLEDDisplaySSD1306.cpp")
      
      endif()


      if(DIO_STREAMI2C_PWMCONTROLER_PCA9685_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CPWMControlerPCA9685.cpp")
  
      endif()


      if(DIO_STREAMI2C_TEMHUMSENSOR_AM2315_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CTemHumSensorAM2315.cpp")
  
      endif()


      if(DIO_STREAMI2C_TEMHUMSENSOR_SHT20_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CTemHumSensorSHT20.cpp")
  
      endif()


      if(DIO_STREAMI2C_MONITORGAUGE_LTC2942_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CMonitorGaugeLTC2942.cpp")
  
      endif()


      if(DIO_STREAMI2C_BATTERYCHARGER_BQ24295_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CBatteryChargerBQ24295.cpp")
  
      endif()


      if(DIO_STREAMI2C_TOUCHSENSOR_AT42QT1060_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CTouchSensorAT42QT1060.cpp")
  
      endif()

    endif()


    if(DIO_STREAMSPI_FEATURE)  

      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODeviceSPI.cpp")   
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamSPI.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamSPIConfig.cpp") 


      if(DIO_STREAMSPI_GPIO_MCP23S17_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_SPI}/DIOSPIGPIOMCP23S17.cpp")
  
      endif()


      if(DIO_STREAMSPI_LCDDISPLAY_PCF8833_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_SPI}/DIOSPILCDDisplayPCF8833.cpp")    
      
      endif()


      if(DIO_STREAMSPI_OLEDDISPLAY_SSD1306_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_SPI}/DIOSPIOLEDDisplaySSD1306.cpp")
      
      endif()


      if(DIO_STREAMSPI_OLEDDISPLAY_SSD1331_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_SPI}/DIOSPIOLEDDisplaySSD1331.cpp")
      
      endif()


      if(DIO_STREAMSPI_TFTDISPLAY_ILI9341_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_SPI}/DIOSPITFTDisplayILI9341.cpp")
      
      endif()


      if(DIO_STREAMSPI_TFTDISPLAY_ST7789_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_SPI}/DIOSPITFTDisplayST7789.cpp")
      
      endif()


      if(DIO_STREAMSPI_TOUCHSCREEN_STMPE610_FEATURE)

        list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_SPI}/DIOSPITouchScreenSTMPE610.cpp")
  
      endif()


    endif()


    if(DIO_STREAMICMP_FEATURE)

      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamICMP.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamICMPConfig.cpp")

    endif()


    if(DIO_STREAMUDP_FEATURE)

      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUDP.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUDPConfig.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUDPLocalEnumServers.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUDPAcknowledge.cpp")    
     
    endif()


    if(DIO_STREAMTCPIP_FEATURE)

      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamTCPIP.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamTCPIPServer.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamTCPIPConfig.cpp") 

    endif()


    if(DIO_STREAMWIFI_FEATURE)  

      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamDeviceWifi.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamWifiRemoteEnumDevices.cpp")

    endif()


    if(DIO_STREAMUDP_FEATURE OR DIO_STREAMTCPIP_FEATURE OR DIO_STREAMWIFI_FEATURE)

      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOIP.cpp")
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOURL.cpp") 
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamDeviceIP.cpp")  
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamIPLocalEnumDevices.cpp")  
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamConfigString.cpp")

    endif()

  endif()
 

  if(DIO_DISPLAYDEVICE_FEATURE)  

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODisplayDevice.cpp")

  endif()


  if(DIO_BUSPIRATE_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS}/DIOBusPirate.cpp")  

  endif()


  if(DIO_APPLICATIONUPDATE_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOApplicationUpdate_XEvent.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOApplicationUpdate.cpp")
    
  endif()
  
  
  if(DIO_CAMERA_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_CAMERA}/DIOCamera.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_CAMERA}/DIOCamera_XEvent.cpp")
  
  endif()
  
  
  if(DIO_LOCATION_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_DATAIO_LOCATION}/DIOLocationAddress.cpp")
  
  endif()
  
endif()


# --------------------------------------------------------------------
# Identification

if(IDENTIFICATION_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_IDENTIFICATION}/ID_IBAN.cpp")

endif()


# --------------------------------------------------------------------
# Utils

list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XBase.cpp")
list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XString.cpp")
list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XBuffer.cpp")
list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XVariant.cpp")
list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XRect.cpp") 
list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XFactory.cpp") 
list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XTimer.cpp")
list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XDateTime.cpp")
list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XRand.cpp")
list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XDir.cpp")
list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XThread.cpp")
list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XPath.cpp")
list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XPathsManager.cpp")


if(XTRACE_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XTrace.cpp")

endif()


if(XTHREADCOLLECTED_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XThreadCollected.cpp")

endif()


if(XSERIALIZABLE_BINARY_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XSerializationMethodBinary.cpp")

endif()


if(XSERIALIZABLE_JSON_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XSerializationMethodJSON.cpp")

endif()


if(XSERIALIZABLE_BINARY_FEATURE OR XSERIALIZABLE_JSON_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XSerializable.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XSerializationMethod.cpp")

endif()


if(XCONSOLE_FEATURE)
  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XConsole.cpp")

endif()


if(XSYSTEM_FEATURE)  

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XSystem.cpp")

endif()


if(XFSMACHINE_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XFSMachine.cpp")

endif()  


if(XSCHEDULER_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XScheduler.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XScheduler_XEvent.cpp")

endif()


if(XPUBLISHER_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XPublisher.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XSubject.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XObserver.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XEvent.cpp")

endif()


if(XUUID_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XUUID.cpp")
  
endif()


if(XLOG_FEATURE)  

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XLog.cpp")
  
endif()


if(XTRANSLATION_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XTranslation.cpp")  

endif()


if(XTRANSLATION_GEN_FEATURE)  

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XLanguage_ISO_639_3.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XTranslation_GEN.cpp")

endif()


if(XSLEEP_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XSleep.cpp")

endif()


if(XPROCESSMANAGER_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XProcessManager.cpp")

endif()


if(XSHAREDMEMORYMANAGER_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XSharedMemoryManager.cpp")

endif()


if(XDRIVEIMAGEMANAGER_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XDriveImageManager.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XDriveImageManager_XEvent.cpp")

endif()


if(XEEPROMMEMORYMANAGER_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XEEPROMMemoryManager.cpp")

endif()


if(XFILE_CFG_FEATURE) 

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS_FORMATFILES}/XFileCFG.cpp")

endif()


if(XFILE_INI_FEATURE) 

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS_FORMATFILES}/XFileINI.cpp")

endif()


if(XFILE_ZIP_FEATURE) 

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS_FORMATFILES}/XFileZIP.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS_FORMATFILES}/XFileZIP_XEvent.cpp")  

endif()  
 

if(XFILE_XML_FEATURE) 

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS_FORMATFILES}/XFileXML.cpp")

endif()  
 

if(XFILE_JSON_FEATURE)  

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS_FORMATFILES}/XFileJSON.cpp")

endif()


if(XFILE_RIFF_FEATURE) 

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS_FORMATFILES}/XFileRIFF.cpp")

endif()
  
  
if(XFILE_HEX_FEATURE)  

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS_FORMATFILES}/XFileHEX.cpp")

endif()
 

if(XFILE_DFU_FEATURE)  

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS_FORMATFILES}/XFileDFU.cpp")  

endif()  


if(XFILE_TXT_FEATURE)
     
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS_FORMATFILES}/XFileTXT.cpp")

endif()  


if(XFILE_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS_FORMATFILES}/XFile.cpp")
  
endif()  


if(XASN1_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XASN1.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XBER.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XBER_XEvent.cpp")

endif()


if(XLICENSE_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XLicense_XEvent.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XLicense.cpp")

endif()


# --------------------------------------------------------------------
# Cipher

if(HASH_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/Hash.cpp")
   
  if(HASH_CRC16_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHCRC16.cpp")
  
  endif()
 
  if(HASH_CKS16_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHCKS16.cpp")
  
  endif()
 
  if(HASH_CRC32_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHCRC32.cpp")
  
  endif()
 
  if(HASH_MD5_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHMD5.cpp")
  
  endif()
 
  if(HASH_SHA1_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHSHA1.cpp")
  
  endif()
 
  if(HASH_SHA2_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHSHA2.cpp")
  
  endif()
 
  if(HASH_COMP128V1_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/HashCOMP128v1.cpp")
  
  endif()
 
  if(HASH_WHIRLPOOL_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHWhirlpool.cpp")
  
  endif()   

endif()


if(CIPHER_SYMMETRIC_FEATURE OR CIPHER_ASYMMETRIC_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/Cipher.cpp")  
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherKey.cpp")  
  

endif()


if(CIPHER_SYMMETRIC_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherKeySymmetrical.cpp")  

  if(CIPHER_SYMMETRIC_DES_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherDES.cpp")
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/Cipher3DES.cpp")
  
  endif()

  if(CIPHER_SYMMETRIC_AES_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherAES.cpp")
  
  endif()

  if(CIPHER_SYMMETRIC_BLOWFISH_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherBlowfish.cpp")
  
  endif()

endif()


if(CIPHER_ASYMMETRIC_FEATURE)  
 
  if(CIPHER_ASYMMETRIC_RSA_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_XUTILS}/XMPInteger.cpp")     
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherRSA.cpp") 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherKeyPrivateRSA.cpp") 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherKeyPublicRSA.cpp") 
    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherKeyECDSA.cpp") 
    
    if(CIPHER_ASYMMETRIC_FILEKEY_GFK)
  
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherKeysFileGKF.cpp")    
	
    endif()

    if(CIPHER_ASYMMETRIC_FILEKEY_PEM)
  
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherCertificateX509.cpp") 
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherTrustedRootCertificatesX509.cpp") 
      list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherKeysFilePEM.cpp") 
	
    endif()

  endif()

  if(CIPHER_ASYMMETRIC_X25519_FEATURE)

    list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherECDSAX25519.cpp")  
  
  endif()

endif()


# --------------------------------------------------------------------
# Compress

if(COMPRESS_GZ_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_COMPRESS}/CompressGZ.cpp")
 
endif()


if(COMPRESS_LZRW1KH_FEATURE)                                                              

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_COMPRESS}/CompressLZRW1KH.cpp")

endif()


if(COMPRESS_LZW_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_COMPRESS}/CompressLZW.cpp")

endif()


if(COMPRESS_ZIP_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_COMPRESS}/CompressZIP.cpp")
  
endif()


if(COMPRESS_FEATURE)

  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_COMPRESS}/CompressManager.cpp")
  list(APPEND GEN_SOURCES_MODULES_LIST "${GEN_DIRECTORY_SOURCES_COMPRESS}/CompressBase.cpp")

endif()


